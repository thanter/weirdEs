PRIMITIVE TYPES (6)

Everything that is NOT an object

- undefined
	lack of existence

- null
	lack of existence as well
	(I can use this, not undefined)

- boolean
	true / false

- number
	Floating point number, always has decimal points.

- string
	between "" or ''

- symbol (introduced in es6)

======================================================================================

OPERATOR PRECEDENCE & ASSOCIATIVITY
Operators are like functions.
eg 5 + 6, internally is represented as +(5,6) and return the value that was calculated

Same thing stands for the assignment operator as well (=)
var a = 5;

* Above line RETURNS the assigned value, '5'

In case where the same operator is used more than once, then the associativity sais how
the statement will be executed. For example, '=' has associativity from right to left.

var a = 1, b = 2, c= 3;

a = b = 3;

console.log(a);
console.log(b);
console.log(c);

-> 3
-> 3
-> 3

* RIGHT TO LEFT ASSOCIATIVITY, b = 3 returns '3'


======================================================================================
COERCION
	converting a value from one type to another
	- dynamically typed

eg:
var a = 1 + 2;
res: 3 (integer)

var a = '1' + '2';
res: 12 (string)

var a = 1 + '2'
res: 12 (string)
JAVASCRIPT decides in this case to handle it as string

======================================================================================
COMPARISON OPERATORS
When using comparison operators, js again handles them as functions
and precedence and associativity matters.

eg
console.log(3 > 2 > 1) 	// LEFT TO RIGHT ASSOCIATIVITY
console.log(true > 1)	// TRUE coerces to 1
console.log(1 > 1)
FALSE.

Same thing applies when using the equality operators
JS coerces the values.

COERCE TO NUMBER
Number('4'), Number(false), Number(null), Number(undefined) 

COERCE TO String
String('4'), String(false), String(null), String(undefined) 

'a' == a
true
'a' === a
false

false == 0 
true (cause false corces to 0)

false === 0
false

In case you are not certain about a comparison you can check the sameness table:
https://developer.mozilla.org/el/docs/Web/JavaScript/Equality_comparisons_and_sameness


***** VALUES THAT ARE FALSE *****
Boolean("")
Boolean(undefined)
Boolean(false)
Boolean(null)
Boolean(NaN)
Boolean(0)

are all coerced to FALSE.
